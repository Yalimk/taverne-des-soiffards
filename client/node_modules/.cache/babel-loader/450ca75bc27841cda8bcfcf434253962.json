{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\virtuoworks\\\\Desktop\\\\taverne-des-soiffards\\\\front-end\\\\src\\\\components\\\\post\\\\WriteComment.jsx\";\n// Native modules import\nimport React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\"; // Personal modules import\n\nimport { writeComment, deleteComment } from \"../../logic/post/apiPost\";\nimport { isLoggedIn } from \"../../logic/auth/index\";\n\nclass WriteComment extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      message: \"\" // error: \"\",\n\n    };\n\n    this.handleChange = event => {\n      // this.setState({\n      //   error: \"\",\n      // });\n      this.setState({\n        message: event.target.value\n      });\n    };\n\n    this.addComment = async event => {\n      event.preventDefault();\n\n      const userId = isLoggedIn().user._id;\n\n      const token = isLoggedIn().token;\n      const postId = this.props.postId;\n      const comment = {\n        message: this.state.message\n      }; // if (this.isValid()) {\n\n      try {\n        const response = await writeComment(userId, token, postId, comment);\n\n        if (response.error) {\n          console.log(`[front-end/src/components/post/WriteComment.jsx => addComment] : response.error: ${JSON.stringify(response.error)}`);\n        } else {\n          this.setState({\n            message: \"\"\n          });\n          this.props.updateComments(response.comments);\n        }\n      } catch (error) {\n        console.error(`[front-end/src/components/post/WriteComment.jsx => addComment] : error: ${error}`);\n      } // } else {\n      //   console.error(`[front-end/src/components/post/WriteComment.jsx => addComment] : The validation didn't go through.`)\n      // }\n\n    };\n  }\n\n  // removeComment = (comment) => {\n  //   const userId = isLoggedIn().user._id;\n  //   const token = isLoggedIn().token;\n  //   const postId = this.props.postId;\n  //   deleteComment(userId, token, postId, comment).then(data => {\n  //     if (data.error) {\n  //         console.log(data.error);\n  //     } else {\n  //         this.props.updateComments(data.comments);\n  //     }\n  //   });\n  // };\n  //   deleteConfirmation = comment => {\n  //     let answer = window.confirm(\n  //       \"Es-tu sûr de vouloir supprimer ton message, pirate ?\"\n  //     );\n  //     if (answer) {\n  //       this.deleteComment(comment);\n  //     }\n  // };\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Donne ton avis sur ce message, moussaillon !\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          action: \"\",\n          onSubmit: this.addComment,\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"form-control\",\n            type: \"text\",\n            onChange: this.handleChange,\n            placeholder: \"Ecris ici ton avis...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default WriteComment;","map":{"version":3,"sources":["C:/Users/virtuoworks/Desktop/taverne-des-soiffards/front-end/src/components/post/WriteComment.jsx"],"names":["React","Component","Link","writeComment","deleteComment","isLoggedIn","WriteComment","state","message","handleChange","event","setState","target","value","addComment","preventDefault","userId","user","_id","token","postId","props","comment","response","error","console","log","JSON","stringify","updateComments","comments","render"],"mappings":";;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,IAAT,QAAqB,kBAArB,C,CAEA;;AACA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,0BAA5C;AACA,SAASC,UAAT,QAA2B,wBAA3B;;AAEA,MAAMC,YAAN,SAA2BL,SAA3B,CAAqC;AAAA;AAAA;AAAA,SACnCM,KADmC,GAC3B;AACNC,MAAAA,OAAO,EAAE,EADH,CAEN;;AAFM,KAD2B;;AAAA,SAMnCC,YANmC,GAMnBC,KAAD,IAAW;AACxB;AACA;AACA;AACA,WAAKC,QAAL,CAAc;AACZH,QAAAA,OAAO,EAAEE,KAAK,CAACE,MAAN,CAAaC;AADV,OAAd;AAGD,KAbkC;;AAAA,SA2BnCC,UA3BmC,GA2BtB,MAAOJ,KAAP,IAAiB;AAC5BA,MAAAA,KAAK,CAACK,cAAN;;AACA,YAAMC,MAAM,GAAGX,UAAU,GAAGY,IAAb,CAAkBC,GAAjC;;AACA,YAAMC,KAAK,GAAGd,UAAU,GAAGc,KAA3B;AACA,YAAMC,MAAM,GAAG,KAAKC,KAAL,CAAWD,MAA1B;AACA,YAAME,OAAO,GAAG;AAAEd,QAAAA,OAAO,EAAE,KAAKD,KAAL,CAAWC;AAAtB,OAAhB,CAL4B,CAO5B;;AACE,UAAI;AACF,cAAMe,QAAQ,GAAG,MAAMpB,YAAY,CAACa,MAAD,EAASG,KAAT,EAAgBC,MAAhB,EAAwBE,OAAxB,CAAnC;;AACA,YAAIC,QAAQ,CAACC,KAAb,EAAoB;AAClBC,UAAAA,OAAO,CAACC,GAAR,CAAa,oFAAmFC,IAAI,CAACC,SAAL,CAAeL,QAAQ,CAACC,KAAxB,CAA+B,EAA/H;AACD,SAFD,MAEO;AACL,eAAKb,QAAL,CAAc;AACZH,YAAAA,OAAO,EAAE;AADG,WAAd;AAGA,eAAKa,KAAL,CAAWQ,cAAX,CAA0BN,QAAQ,CAACO,QAAnC;AACD;AACF,OAVD,CAUE,OAAON,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACD,KAAR,CAAe,2EAA0EA,KAAM,EAA/F;AACD,OApByB,CAqB5B;AACA;AACA;;AACD,KAnDkC;AAAA;;AAqDnC;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEEO,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,+BACE;AAAM,UAAA,MAAM,EAAC,EAAb;AAAgB,UAAA,QAAQ,EAAE,KAAKjB,UAA/B;AAAA,iCACE;AACE,YAAA,SAAS,EAAC,cADZ;AAEE,YAAA,IAAI,EAAC,MAFP;AAGE,YAAA,QAAQ,EAAE,KAAKL,YAHjB;AAIE,YAAA,WAAW,EAAC;AAJd;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAeD;;AA5FkC;;AA+FrC,eAAeH,YAAf","sourcesContent":["// Native modules import\r\nimport React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// Personal modules import\r\nimport { writeComment, deleteComment } from \"../../logic/post/apiPost\";\r\nimport { isLoggedIn } from \"../../logic/auth/index\";\r\n\r\nclass WriteComment extends Component {\r\n  state = {\r\n    message: \"\",\r\n    // error: \"\",\r\n  };\r\n\r\n  handleChange = (event) => {\r\n    // this.setState({\r\n    //   error: \"\",\r\n    // });\r\n    this.setState({\r\n      message: event.target.value,\r\n    });\r\n  };\r\n\r\n  // isValid = () => {\r\n  //   const { message } = this.state;\r\n  //   if (!message.length > 0 || message.length > 300) {\r\n  //     this.setState({\r\n  //       error:\r\n  //         \"Ton commentaire doit être d'au moins 1 caractère et d'au plus 300 caractères, moussaillon !\",\r\n  //     });\r\n  //     return false;\r\n  //   }\r\n  //   return true;\r\n  // };\r\n\r\n  addComment = async (event) => {\r\n    event.preventDefault();\r\n    const userId = isLoggedIn().user._id;\r\n    const token = isLoggedIn().token;\r\n    const postId = this.props.postId;\r\n    const comment = { message: this.state.message };\r\n\r\n    // if (this.isValid()) {\r\n      try {\r\n        const response = await writeComment(userId, token, postId, comment);\r\n        if (response.error) {\r\n          console.log(`[front-end/src/components/post/WriteComment.jsx => addComment] : response.error: ${JSON.stringify(response.error)}`);\r\n        } else {\r\n          this.setState({\r\n            message: \"\",\r\n          });\r\n          this.props.updateComments(response.comments);\r\n        }\r\n      } catch (error) {\r\n        console.error(`[front-end/src/components/post/WriteComment.jsx => addComment] : error: ${error}`);\r\n      }\r\n    // } else {\r\n    //   console.error(`[front-end/src/components/post/WriteComment.jsx => addComment] : The validation didn't go through.`)\r\n    // }\r\n  };\r\n\r\n  // removeComment = (comment) => {\r\n  //   const userId = isLoggedIn().user._id;\r\n  //   const token = isLoggedIn().token;\r\n  //   const postId = this.props.postId;\r\n\r\n  //   deleteComment(userId, token, postId, comment).then(data => {\r\n  //     if (data.error) {\r\n  //         console.log(data.error);\r\n  //     } else {\r\n  //         this.props.updateComments(data.comments);\r\n  //     }\r\n  //   });\r\n  // };\r\n\r\n//   deleteConfirmation = comment => {\r\n//     let answer = window.confirm(\r\n//       \"Es-tu sûr de vouloir supprimer ton message, pirate ?\"\r\n//     );\r\n//     if (answer) {\r\n//       this.deleteComment(comment);\r\n//     }\r\n// };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>Donne ton avis sur ce message, moussaillon !</h2>\r\n        <div className=\"form-group\">\r\n          <form action=\"\" onSubmit={this.addComment}>\r\n            <input\r\n              className=\"form-control\"\r\n              type=\"text\"\r\n              onChange={this.handleChange}\r\n              placeholder=\"Ecris ici ton avis...\"\r\n            />\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WriteComment;\r\n"]},"metadata":{},"sourceType":"module"}