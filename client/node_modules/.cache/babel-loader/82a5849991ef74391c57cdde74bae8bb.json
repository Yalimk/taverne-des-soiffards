{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\virtuoworks\\\\Desktop\\\\taverne-des-soiffards\\\\front-end\\\\src\\\\post\\\\EditPost.jsx\";\n// Native modules import\nimport React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\"; // Personal modules import\n\nimport { isLoggedIn } from \"../auth/index\";\nimport { viewPost, updatePost } from \"./apiPost\";\nimport defaultPostPic from \"../images/beautiful-sea.jpg\";\n\nclass EditPost extends Component {\n  // constructor() {\n  //   super();\n  //   this.state = {\n  //     id: \"\",\n  //     title: \"\",\n  //     body: \"\",\n  //     redirectionProfile: false,\n  //     error: \"\",\n  //     fileSize: 0,\n  //     loading: false,\n  //   };\n  // }\n  // init = async (postId) => {\n  //   console.info(`postId dans la méthode init : ${postId}`);\n  //   try {\n  //     const data = await viewPost(postId);\n  //     if (data.error) {\n  //       console.error('DANS ERROR DU CHECK If data.error de INIT');\n  //       this.setState({\n  //         redirectionProfile: true,\n  //       });\n  //     } else {\n  //       console.info(\n  //         `data.author._id dans la méthode init : ${data.author._id}`\n  //       );\n  //       this.setState({\n  //         id: data._id,\n  //         title: data.title,\n  //         body: data.body,\n  //         error: \"\",\n  //       });\n  //     }\n  //   } catch (error) {\n  //     console.error(\n  //       `The init method encountered the following error: ${error}`\n  //     );\n  //   }\n  // };\n  // componentDidMount() {\n  //   this.postData = new FormData();\n  //   try {\n  //     const postId = this.props.match.params.postId;\n  //     if (postId) {\n  //       this.init(postId);\n  //     } else {\n  //       console.error(\"No postId found.\");\n  //     }\n  //   } catch (error) {\n  //     console.error(\"Something went wrong with componentDidMount method.\");\n  //   }\n  // }\n  // isValid = () => {\n  //   const { title, body, fileSize } = this.state;\n  //   if (fileSize > 1000000) {\n  //     this.setState({\n  //       loading: false,\n  //       error: \"Le poids du fichier ne doit pas dépasser 1Mb ! Déconne pas !\",\n  //     });\n  //     return false;\n  //   }\n  //   if (title.length === 0 || title.length > 50) {\n  //     this.setState({\n  //       loading: false,\n  //       error:\n  //         \"Le titre est requis et doit faire moins de 50 caractères, marin d'eau douce !\",\n  //     });\n  //     return false;\n  //   }\n  //   if (body.length === 0) {\n  //     this.setState({\n  //       loading: false,\n  //       error: `Un message est requis pour envoyer un... message, moussaillon.`,\n  //     });\n  //     return false;\n  //   }\n  //   return true;\n  // };\n  // handleChange = (name) => (event) => {\n  //   this.setState({ error: \"\" });\n  //   const value = name === \"photo\" ? event.target.files[0] : event.target.value;\n  //   const fileSize = name === \"photo\" ? event.target.files[0].size : 0;\n  //   this.postData.set(name, value);\n  //   this.setState({ [name]: value, fileSize });\n  // };\n  // submitUpdate = async (event) => {\n  //   event.preventDefault();\n  //   this.setState({ loading: true });\n  //   if (this.isValid()) {\n  //     const postId = this.state.id;\n  //     // const postId = this.props.match.params.postId;\n  //     console.info(`postId dans la méthode submitUpdate après this.isValid: ${postId}`)\n  //     const token = isLoggedIn().token;\n  //     console.info(`token dans la méthode submitUpdate après this.isValid: ${token}`)\n  //     const data = await updatePost(postId, token, this.postData);\n  //     if (data.error) {\n  //       this.setState({ error: data.error });\n  //       console.error('DANS ERROR DU CHECK If data.error de SUBMITUPDATE');\n  //     } else {\n  //       this.setState({\n  //         loading: false,\n  //         title: \"\",\n  //         body: \"\",\n  //         redirectionProfile: true,\n  //       });\n  //     }\n  //   }\n  // };\n  // postUpdateForm = (title, body) => (\n  //   <form action=\"\">\n  //     <div className=\"form-group\">\n  //       <label className=\"text-muted\">Image</label>\n  //       <input\n  //         onChange={this.handleChange(\"photo\")}\n  //         type=\"file\"\n  //         accept=\"image/*\"\n  //         className=\"form-control\"\n  //       />\n  //     </div>\n  //     <div className=\"form-group\">\n  //       <label className=\"text-muted\">Titre</label>\n  //       <input\n  //         onChange={this.handleChange(\"title\")}\n  //         type=\"text\"\n  //         className=\"form-control\"\n  //         value={title}\n  //       />\n  //     </div>\n  //     <div className=\"form-group\">\n  //       <label className=\"text-muted\">Message</label>\n  //       <textarea\n  //         onChange={this.handleChange(\"body\")}\n  //         type=\"body\"\n  //         className=\"form-control\"\n  //         value={body}\n  //       />\n  //     </div>\n  //     <button\n  //       onClick={this.submitUpdate}\n  //       className=\"btn btn-raised btn-primary\"\n  //     >\n  //       Envoyer\n  //     </button>\n  //   </form>\n  // );\n  // render() {\n  //   const {\n  //     id,\n  //     title,\n  //     body,\n  //     redirectionProfile,\n  //     /*error,\n  //   loading*/ } = this.state;\n  //   console.log(\"id inside render: \", id);\n  //   console.log(\"user._id inside render: \", isLoggedIn().user._id);\n  //   console.log(\"user inside render: \", isLoggedIn().user);\n  //   if (redirectionProfile) {\n  //     // console.log(`redirection vers /user/${isLoggedIn().user._id}` );\n  //     <Redirect to={`/user/${isLoggedIn().user._id}`} />;\n  //   }\n  //   return (\n  //     <div>\n  //       {/* {JSON.stringify(this.state)} */}\n  //       <div className=\"card-body\">\n  //         <img\n  //           style={{ height: \"200px\", width: \"auto\" }}\n  //           className=\"img-thumbnail mb-3\"\n  //           src={`${process.env.REACT_APP_API_URI}/post/photo/${id}`}\n  //           onError={(img) => (img.target.src = `${defaultPostPic}`)}\n  //           alt={title}\n  //         />\n  //         <h3 className=\"card-title mt-3 mb-3\">{title}</h3>\n  //         {this.postUpdateForm(title, body)}\n  //       </div>\n  //     </div>\n  //   );\n  // }\n  constructor() {\n    super();\n\n    this.init = async postId => {\n      const data = await viewPost(postId);\n\n      if (data.error) {\n        this.setState({\n          redirectionProfile: true\n        });\n      } else {\n        this.setState({\n          id: data.author._id,\n          title: data.title,\n          body: data.body,\n          error: \"\"\n        });\n      }\n    };\n\n    this.isValid = () => {\n      const {\n        title,\n        body,\n        fileSize\n      } = this.state;\n\n      if (fileSize > 1000000) {\n        this.setState({\n          loading: false,\n          error: \"Le poids du fichier ne doit pas dépasser 1Mb ! Déconne pas !\"\n        });\n        return false;\n      }\n\n      if (title.length === 0 || title.length > 50) {\n        this.setState({\n          loading: false,\n          error: \"Le titre est requis et doit faire moins de 50 caractères, marin d'eau douce !\"\n        });\n        return false;\n      }\n\n      if (body.length === 0) {\n        this.setState({\n          loading: false,\n          error: `Un message est requis pour envoyer un... message, moussaillon.`\n        });\n        return false;\n      }\n\n      return true;\n    };\n\n    this.handleChange = name => event => {\n      this.setState({\n        error: \"\"\n      });\n      const value = name === \"photo\" ? event.target.files[0] : event.target.value;\n      const fileSize = name === \"photo\" ? event.target.files[0].size : 0;\n      this.postData.set(name, value);\n      this.setState({\n        [name]: value,\n        fileSize\n      });\n    };\n\n    this.submitUpdate = async event => {\n      event.preventDefault();\n      this.setState({\n        loading: true\n      });\n\n      if (this.isValid()) {\n        const postId = this.props.match.params.postId;\n        const token = isLoggedIn().token;\n        const data = await updatePost(postId, token, this.postData);\n        if (data.error) this.setState({\n          error: data.error\n        });else {\n          this.setState({\n            loading: false,\n            title: \"\",\n            body: \"\",\n            redirectionProfile: true\n          });\n        }\n      }\n    };\n\n    this.updatePostForm = (title, body) => /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"text-muted\",\n          children: \"Image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: this.handleChange(\"photo\"),\n          type: \"file\",\n          accept: \"image/*\",\n          className: \"form-control\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"text-muted\",\n          children: \"Titre\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: this.handleChange(\"title\"),\n          type: \"text\",\n          className: \"form-control\",\n          value: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"text-muted\",\n          children: \"Message\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          onChange: this.handleChange(\"body\"),\n          type: \"text\",\n          className: \"form-control\",\n          value: body\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.submitUpdate,\n        className: \"btn btn-raised btn-primary\",\n        children: \"Modifier\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 5\n    }, this);\n\n    this.state = {\n      id: \"\",\n      title: \"\",\n      body: \"\",\n      redirectionProfile: false,\n      error: \"\",\n      fileSize: 0,\n      loading: false\n    };\n  }\n\n  componentDidMount() {\n    this.postData = new FormData();\n    const postId = this.props.match.params.postId;\n    this.init(postId);\n  }\n\n  render() {\n    const {\n      id,\n      title,\n      body,\n      redirectionProfile,\n      error,\n      loading\n    } = this.state;\n\n    if (redirectionProfile) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/user/${isLoggedIn().user._id}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 14\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"mt-5 mb-5\",\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert alert-danger\",\n        style: {\n          display: error ? \"\" : \"none\"\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 9\n      }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"jumbotron text-center\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Chargement...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 11\n      }, this) : \"\", /*#__PURE__*/_jsxDEV(\"img\", {\n        style: {\n          height: \"200px\",\n          width: \"auto\"\n        },\n        className: \"img-thumbnail\",\n        src: `${process.env.REACT_APP_API_URI}/post/photo/${id}?${new Date().getTime()}`,\n        onError: i => i.target.src = `${defaultPostPic}`,\n        alt: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 9\n      }, this), this.updatePostForm(title, body)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default EditPost;","map":{"version":3,"sources":["C:/Users/virtuoworks/Desktop/taverne-des-soiffards/front-end/src/post/EditPost.jsx"],"names":["React","Component","Redirect","isLoggedIn","viewPost","updatePost","defaultPostPic","EditPost","constructor","init","postId","data","error","setState","redirectionProfile","id","author","_id","title","body","isValid","fileSize","state","loading","length","handleChange","name","event","value","target","files","size","postData","set","submitUpdate","preventDefault","props","match","params","token","updatePostForm","componentDidMount","FormData","render","user","display","height","width","process","env","REACT_APP_API_URI","Date","getTime","i","src"],"mappings":"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","sourcesContent":["// Native modules import\r\nimport React, { Component } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\n// Personal modules import\r\nimport { isLoggedIn } from \"../auth/index\";\r\nimport { viewPost, updatePost } from \"./apiPost\";\r\nimport defaultPostPic from \"../images/beautiful-sea.jpg\";\r\n\r\nclass EditPost extends Component {\r\n  // constructor() {\r\n  //   super();\r\n  //   this.state = {\r\n  //     id: \"\",\r\n  //     title: \"\",\r\n  //     body: \"\",\r\n  //     redirectionProfile: false,\r\n  //     error: \"\",\r\n  //     fileSize: 0,\r\n  //     loading: false,\r\n  //   };\r\n  // }\r\n\r\n  // init = async (postId) => {\r\n  //   console.info(`postId dans la méthode init : ${postId}`);\r\n  //   try {\r\n  //     const data = await viewPost(postId);\r\n  //     if (data.error) {\r\n  //       console.error('DANS ERROR DU CHECK If data.error de INIT');\r\n  //       this.setState({\r\n  //         redirectionProfile: true,\r\n  //       });\r\n  //     } else {\r\n  //       console.info(\r\n  //         `data.author._id dans la méthode init : ${data.author._id}`\r\n  //       );\r\n  //       this.setState({\r\n  //         id: data._id,\r\n  //         title: data.title,\r\n  //         body: data.body,\r\n  //         error: \"\",\r\n  //       });\r\n  //     }\r\n  //   } catch (error) {\r\n  //     console.error(\r\n  //       `The init method encountered the following error: ${error}`\r\n  //     );\r\n  //   }\r\n  // };\r\n\r\n  // componentDidMount() {\r\n  //   this.postData = new FormData();\r\n  //   try {\r\n  //     const postId = this.props.match.params.postId;\r\n  //     if (postId) {\r\n  //       this.init(postId);\r\n  //     } else {\r\n  //       console.error(\"No postId found.\");\r\n  //     }\r\n  //   } catch (error) {\r\n  //     console.error(\"Something went wrong with componentDidMount method.\");\r\n  //   }\r\n  // }\r\n\r\n  // isValid = () => {\r\n  //   const { title, body, fileSize } = this.state;\r\n  //   if (fileSize > 1000000) {\r\n  //     this.setState({\r\n  //       loading: false,\r\n  //       error: \"Le poids du fichier ne doit pas dépasser 1Mb ! Déconne pas !\",\r\n  //     });\r\n  //     return false;\r\n  //   }\r\n  //   if (title.length === 0 || title.length > 50) {\r\n  //     this.setState({\r\n  //       loading: false,\r\n  //       error:\r\n  //         \"Le titre est requis et doit faire moins de 50 caractères, marin d'eau douce !\",\r\n  //     });\r\n  //     return false;\r\n  //   }\r\n  //   if (body.length === 0) {\r\n  //     this.setState({\r\n  //       loading: false,\r\n  //       error: `Un message est requis pour envoyer un... message, moussaillon.`,\r\n  //     });\r\n  //     return false;\r\n  //   }\r\n  //   return true;\r\n  // };\r\n\r\n  // handleChange = (name) => (event) => {\r\n  //   this.setState({ error: \"\" });\r\n  //   const value = name === \"photo\" ? event.target.files[0] : event.target.value;\r\n\r\n  //   const fileSize = name === \"photo\" ? event.target.files[0].size : 0;\r\n  //   this.postData.set(name, value);\r\n  //   this.setState({ [name]: value, fileSize });\r\n  // };\r\n\r\n  // submitUpdate = async (event) => {\r\n  //   event.preventDefault();\r\n  //   this.setState({ loading: true });\r\n\r\n  //   if (this.isValid()) {\r\n  //     const postId = this.state.id;\r\n  //     // const postId = this.props.match.params.postId;\r\n  //     console.info(`postId dans la méthode submitUpdate après this.isValid: ${postId}`)\r\n  //     const token = isLoggedIn().token;\r\n  //     console.info(`token dans la méthode submitUpdate après this.isValid: ${token}`)\r\n\r\n  //     const data = await updatePost(postId, token, this.postData);\r\n  //     if (data.error) {\r\n  //       this.setState({ error: data.error });\r\n  //       console.error('DANS ERROR DU CHECK If data.error de SUBMITUPDATE');\r\n  //     } else {\r\n  //       this.setState({\r\n  //         loading: false,\r\n  //         title: \"\",\r\n  //         body: \"\",\r\n  //         redirectionProfile: true,\r\n  //       });\r\n  //     }\r\n  //   }\r\n  // };\r\n\r\n  // postUpdateForm = (title, body) => (\r\n  //   <form action=\"\">\r\n  //     <div className=\"form-group\">\r\n  //       <label className=\"text-muted\">Image</label>\r\n  //       <input\r\n  //         onChange={this.handleChange(\"photo\")}\r\n  //         type=\"file\"\r\n  //         accept=\"image/*\"\r\n  //         className=\"form-control\"\r\n  //       />\r\n  //     </div>\r\n  //     <div className=\"form-group\">\r\n  //       <label className=\"text-muted\">Titre</label>\r\n  //       <input\r\n  //         onChange={this.handleChange(\"title\")}\r\n  //         type=\"text\"\r\n  //         className=\"form-control\"\r\n  //         value={title}\r\n  //       />\r\n  //     </div>\r\n  //     <div className=\"form-group\">\r\n  //       <label className=\"text-muted\">Message</label>\r\n  //       <textarea\r\n  //         onChange={this.handleChange(\"body\")}\r\n  //         type=\"body\"\r\n  //         className=\"form-control\"\r\n  //         value={body}\r\n  //       />\r\n  //     </div>\r\n\r\n  //     <button\r\n  //       onClick={this.submitUpdate}\r\n  //       className=\"btn btn-raised btn-primary\"\r\n  //     >\r\n  //       Envoyer\r\n  //     </button>\r\n  //   </form>\r\n  // );\r\n\r\n  // render() {\r\n  //   const {\r\n  //     id,\r\n  //     title,\r\n  //     body,\r\n  //     redirectionProfile,\r\n  //     /*error,\r\n  //   loading*/ } = this.state;\r\n  //   console.log(\"id inside render: \", id);\r\n  //   console.log(\"user._id inside render: \", isLoggedIn().user._id);\r\n  //   console.log(\"user inside render: \", isLoggedIn().user);\r\n  //   if (redirectionProfile) {\r\n  //     // console.log(`redirection vers /user/${isLoggedIn().user._id}` );\r\n  //     <Redirect to={`/user/${isLoggedIn().user._id}`} />;\r\n  //   }\r\n  //   return (\r\n  //     <div>\r\n  //       {/* {JSON.stringify(this.state)} */}\r\n  //       <div className=\"card-body\">\r\n  //         <img\r\n  //           style={{ height: \"200px\", width: \"auto\" }}\r\n  //           className=\"img-thumbnail mb-3\"\r\n  //           src={`${process.env.REACT_APP_API_URI}/post/photo/${id}`}\r\n  //           onError={(img) => (img.target.src = `${defaultPostPic}`)}\r\n  //           alt={title}\r\n  //         />\r\n\r\n  //         <h3 className=\"card-title mt-3 mb-3\">{title}</h3>\r\n\r\n  //         {this.postUpdateForm(title, body)}\r\n  //       </div>\r\n  //     </div>\r\n  //   );\r\n  // }\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      id: \"\",\r\n      title: \"\",\r\n      body: \"\",\r\n      redirectionProfile: false,\r\n      error: \"\",\r\n      fileSize: 0,\r\n      loading: false,\r\n    };\r\n  }\r\n\r\n  init = async (postId) => {\r\n    const data = await viewPost(postId);\r\n    if (data.error) {\r\n      this.setState({ redirectionProfile: true });\r\n    } else {\r\n      this.setState({\r\n        id: data.author._id,\r\n        title: data.title,\r\n        body: data.body,\r\n        error: \"\",\r\n      });\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.postData = new FormData();\r\n    const postId = this.props.match.params.postId;\r\n    this.init(postId);\r\n  }\r\n\r\n  isValid = () => {\r\n    const { title, body, fileSize } = this.state;\r\n    if (fileSize > 1000000) {\r\n      this.setState({\r\n        loading: false,\r\n        error: \"Le poids du fichier ne doit pas dépasser 1Mb ! Déconne pas !\",\r\n      });\r\n      return false;\r\n    }\r\n    if (title.length === 0 || title.length > 50) {\r\n      this.setState({\r\n        loading: false,\r\n        error:\r\n          \"Le titre est requis et doit faire moins de 50 caractères, marin d'eau douce !\",\r\n      });\r\n      return false;\r\n    }\r\n    if (body.length === 0) {\r\n      this.setState({\r\n        loading: false,\r\n        error: `Un message est requis pour envoyer un... message, moussaillon.`,\r\n      });\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  handleChange = (name) => (event) => {\r\n    this.setState({ error: \"\" });\r\n    const value = name === \"photo\" ? event.target.files[0] : event.target.value;\r\n\r\n    const fileSize = name === \"photo\" ? event.target.files[0].size : 0;\r\n    this.postData.set(name, value);\r\n    this.setState({ [name]: value, fileSize });\r\n  };\r\n\r\n  submitUpdate = async (event) => {\r\n    event.preventDefault();\r\n    this.setState({ loading: true });\r\n\r\n    if (this.isValid()) {\r\n      const postId = this.props.match.params.postId;\r\n      const token = isLoggedIn().token;\r\n\r\n      const data = await updatePost(postId, token, this.postData);\r\n      if (data.error) this.setState({ error: data.error });\r\n      else {\r\n        this.setState({\r\n          loading: false,\r\n          title: \"\",\r\n          body: \"\",\r\n          redirectionProfile: true,\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  updatePostForm = (title, body) => (\r\n    <form>\r\n      <div className=\"form-group\">\r\n        <label className=\"text-muted\">Image</label>\r\n        <input\r\n          onChange={this.handleChange(\"photo\")}\r\n          type=\"file\"\r\n          accept=\"image/*\"\r\n          className=\"form-control\"\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label className=\"text-muted\">Titre</label>\r\n        <input\r\n          onChange={this.handleChange(\"title\")}\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          value={title}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"form-group\">\r\n        <label className=\"text-muted\">Message</label>\r\n        <textarea\r\n          onChange={this.handleChange(\"body\")}\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          value={body}\r\n        />\r\n      </div>\r\n\r\n      <button onClick={this.submitUpdate} className=\"btn btn-raised btn-primary\">\r\n        Modifier\r\n      </button>\r\n    </form>\r\n  );\r\n\r\n  render() {\r\n    const { id, title, body, redirectionProfile, error, loading } = this.state;\r\n\r\n    if (redirectionProfile) {\r\n      return <Redirect to={`/user/${isLoggedIn().user._id}`} />;\r\n    }\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <h2 className=\"mt-5 mb-5\">{title}</h2>\r\n\r\n        <div\r\n          className=\"alert alert-danger\"\r\n          style={{ display: error ? \"\" : \"none\" }}\r\n        >\r\n          {error}\r\n        </div>\r\n\r\n        {loading ? (\r\n          <div className=\"jumbotron text-center\">\r\n            <h2>Chargement...</h2>\r\n          </div>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n\r\n        <img\r\n          style={{ height: \"200px\", width: \"auto\" }}\r\n          className=\"img-thumbnail\"\r\n          src={`${\r\n            process.env.REACT_APP_API_URI\r\n          }/post/photo/${id}?${new Date().getTime()}`}\r\n          onError={(i) => (i.target.src = `${defaultPostPic}`)}\r\n          alt={title}\r\n        />\r\n\r\n        {this.updatePostForm(title, body)}\r\n\r\n        {/* {isLoggedIn().user.role === \"admin\" &&\r\n                this.editPostForm(title, body)}\r\n\r\n            {isLoggedIn().user._id === id &&\r\n                this.editPostForm(title, body)} */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EditPost;\r\n"]},"metadata":{},"sourceType":"module"}