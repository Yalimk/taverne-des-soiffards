{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\virtuoworks\\\\Desktop\\\\taverne-des-soiffards\\\\front-end\\\\src\\\\post\\\\EditPost.jsx\";\n// Native modules import\nimport React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\"; // Personal modules import\n// import {isLoggedIn} from '../auth/index';\n\nimport { viewPost } from \"./apiPost\";\nimport defaultPostPic from \"../images/beautiful-sea.jpg\";\nimport { isLoggedIn } from \"../auth/index\";\nimport { updatePost } from \"../post/apiPost\";\n\nclass EditPost extends Component {\n  constructor() {\n    super();\n\n    this.init = async postId => {\n      try {\n        const data = await viewPost(postId);\n\n        if (data.error) {\n          this.setState({\n            redirectionProfile: true\n          });\n        } else {\n          this.setState({\n            id: data.author._id,\n            title: data.title,\n            body: data.body,\n            error: \"\"\n          });\n        }\n      } catch (error) {\n        console.error(`The init method encountered the following error: ${error}`);\n      }\n    };\n\n    this.isValid = () => {\n      const {\n        title,\n        body,\n        fileSize\n      } = this.state;\n\n      if (fileSize > 1000000) {\n        this.setState({\n          loading: false,\n          error: \"Le poids du fichier ne doit pas dépasser 1Mb ! Déconne pas !\"\n        });\n        return false;\n      }\n\n      if (title.length === 0 || title.length > 50) {\n        this.setState({\n          loading: false,\n          error: \"Le titre est requis et doit faire moins de 50 caractères, marin d'eau douce !\"\n        });\n        return false;\n      }\n\n      if (body.length === 0) {\n        this.setState({\n          loading: false,\n          error: `Un message est requis pour envoyer un... message, moussaillon.`\n        });\n        return false;\n      }\n\n      return true;\n    };\n\n    this.handleChange = name => event => {\n      this.setState({\n        error: \"\"\n      });\n      const value = name === \"photo\" ? event.target.files[0] : event.target.value;\n      const fileSize = name === \"photo\" ? event.target.files[0].size : 0;\n      this.postData.set(name, value);\n      this.setState({\n        [name]: value,\n        fileSize\n      });\n    };\n\n    this.submitUpdate = async event => {\n      event.preventDefault();\n      this.setState({\n        loading: true\n      });\n\n      if (this.isValid()) {\n        const postId = this.props.match.params.postId;\n        const token = isLoggedIn().token;\n        const data = await updatePost(postId, token, this.postData);\n\n        if (data.error) {\n          this.setState({\n            error: data.error\n          });\n        } else {\n          this.setState({\n            loading: false,\n            title: \"\",\n            body: \"\",\n            redirectionProfile: true\n          });\n        }\n      }\n    };\n\n    this.postUpdate = (title, body) => /*#__PURE__*/_jsxDEV(\"form\", {\n      action: \"\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"text-muted\",\n          children: \"Image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: this.handleChange(\"photo\"),\n          type: \"file\",\n          accept: \"image/*\",\n          className: \"form-control\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"text-muted\",\n          children: \"Titre\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: this.handleChange(\"title\"),\n          type: \"text\",\n          className: \"form-control\",\n          value: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"text-muted\",\n          children: \"Message\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          onChange: this.handleChange(\"body\"),\n          type: \"body\",\n          className: \"form-control\",\n          value: body\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.submitUpdate,\n        type: \"submit\",\n        className: \"btn btn-raised btn-primary\",\n        children: \"Envoyer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 5\n    }, this);\n\n    this.state = {\n      id: \"\",\n      title: \"\",\n      body: \"\",\n      redirectionProfile: false,\n      error: \"\",\n      fileSize: 0,\n      loading: false\n    };\n  }\n\n  componentDidMount() {\n    this.postData = new FormData();\n\n    try {\n      const postId = this.props.match.params.postId;\n\n      if (postId) {\n        this.init(postId);\n      } else {\n        console.error(\"No postId found.\");\n      }\n    } catch (error) {\n      console.error(\"Something went wrong with componentDidMount method.\");\n    }\n  }\n\n  render() {\n    const {\n      title,\n      body,\n      id,\n      redirectionProfile\n    } = this.state;\n    console.log('id inside render: ', id);\n    console.log('user._id inside render: ', isLoggedIn().user._id);\n    console.log('user inside render: ', isLoggedIn().user);\n\n    if (redirectionProfile) {\n      /*#__PURE__*/\n      _jsxDEV(Redirect, {\n        to: `/user/${isLoggedIn().user._id}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 7\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: `${process.env.REACT_APP_API_URI}/post/photo/6015ffadda6a195de889a999}`,\n          alt: title,\n          onError: img => img.target.src = `${defaultPostPic}`,\n          className: \"img-thumbnail mb-3\",\n          style: {\n            height: \"200px\",\n            width: \"auto\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"card-title mt-3 mb-3\",\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }, this), isLoggedIn().user._id === id && this.postUpdate(title, body)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default EditPost; // class EditPost extends Component {\n//   constructor() {\n//       super();\n//       this.state = {\n//           id: \"\",\n//           title: \"\",\n//           body: \"\",\n//           redirectToProfile: false,\n//           error: \"\",\n//           fileSize: 0,\n//           loading: false\n//       };\n//   }\n//   init = postId => {\n//       viewPost(postId).then(data => {\n//           if (data.error) {\n//               this.setState({ redirectToProfile: true });\n//           } else {\n//               this.setState({\n//                   id: data.author._id,\n//                   title: data.title,\n//                   body: data.body,\n//                   error: \"\"\n//               });\n//           }\n//       });\n//   };\n//   componentDidMount() {\n//       this.postData = new FormData();\n//       const postId = this.props.match.params.postId;\n//       this.init(postId);\n//   }\n//   isValid = () => {\n//       const { title, body, fileSize } = this.state;\n//       if (fileSize > 1000000) {\n//           this.setState({\n//               error: \"File size should be less than 100kb\",\n//               loading: false\n//           });\n//           return false;\n//       }\n//       if (title.length === 0 || body.length === 0) {\n//           this.setState({ error: \"All fields are required\", loading: false });\n//           return false;\n//       }\n//       return true;\n//   };\n//   handleChange = name => event => {\n//       this.setState({ error: \"\" });\n//       const value =\n//           name === \"photo\" ? event.target.files[0] : event.target.value;\n//       const fileSize = name === \"photo\" ? event.target.files[0].size : 0;\n//       this.postData.set(name, value);\n//       this.setState({ [name]: value, fileSize });\n//   };\n//   clickSubmit = event => {\n//       event.preventDefault();\n//       this.setState({ loading: true });\n//       if (this.isValid()) {\n//           const postId = this.props.match.params.postId;\n//           const token = isLoggedIn().token;\n//           updatePost(postId, token, this.postData).then(data => {\n//               if (data.error) this.setState({ error: data.error });\n//               else {\n//                   this.setState({\n//                       loading: false,\n//                       title: \"\",\n//                       body: \"\",\n//                       redirectToProfile: true\n//                   });\n//               }\n//           });\n//       }\n//   };\n//   editPostForm = (title, body) => (\n//       <form>\n//           <div className=\"form-group\">\n//               <label className=\"text-muted\">Post Photo</label>\n//               <input\n//                   onChange={this.handleChange(\"photo\")}\n//                   type=\"file\"\n//                   accept=\"image/*\"\n//                   className=\"form-control\"\n//               />\n//           </div>\n//           <div className=\"form-group\">\n//               <label className=\"text-muted\">Title</label>\n//               <input\n//                   onChange={this.handleChange(\"title\")}\n//                   type=\"text\"\n//                   className=\"form-control\"\n//                   value={title}\n//               />\n//           </div>\n//           <div className=\"form-group\">\n//               <label className=\"text-muted\">Body</label>\n//               <textarea\n//                   onChange={this.handleChange(\"body\")}\n//                   type=\"text\"\n//                   className=\"form-control\"\n//                   value={body}\n//               />\n//           </div>\n//           <button\n//               onClick={this.clickSubmit}\n//               className=\"btn btn-raised btn-primary\"\n//           >\n//               Update Post\n//           </button>\n//       </form>\n//   );\n//   render() {\n//       const {\n//           id,\n//           title,\n//           body,\n//           redirectToProfile,\n//           error,\n//           loading\n//       } = this.state;\n//       if (redirectToProfile) {\n//           return <Redirect to={`/user/${isLoggedIn().user._id}`} />;\n//       }\n//       return (\n//           <div className=\"container\">\n//               <h2 className=\"mt-5 mb-5\">{title}</h2>\n//               <div\n//                   className=\"alert alert-danger\"\n//                   style={{ display: error ? \"\" : \"none\" }}\n//               >\n//                   {error}\n//               </div>\n//               {loading ? (\n//                   <div className=\"jumbotron text-center\">\n//                       <h2>Loading...</h2>\n//                   </div>\n//               ) : (\n//                   \"\"\n//               )}\n//               <img\n//                   style={{ height: \"200px\", width: \"auto\" }}\n//                   className=\"img-thumbnail\"\n//                   src={`${\n//                       process.env.REACT_APP_API_URI\n//                   }/post/photo/${id}`}\n//                   onError={i => (i.target.src = `${defaultPostPic}`)}\n//                   alt={title}\n//               />\n//               {/* {isLoggedIn().user.role === \"admin\" &&\n//                   this.editPostForm(title, body)} */}\n//               {isLoggedIn().user._id === id &&\n//                   this.editPostForm(title, body)}\n//           </div>\n//       );\n//   }\n// }\n// export default EditPost;","map":{"version":3,"sources":["C:/Users/virtuoworks/Desktop/taverne-des-soiffards/front-end/src/post/EditPost.jsx"],"names":["React","Component","Redirect","viewPost","defaultPostPic","isLoggedIn","updatePost","EditPost","constructor","init","postId","data","error","setState","redirectionProfile","id","author","_id","title","body","console","isValid","fileSize","state","loading","length","handleChange","name","event","value","target","files","size","postData","set","submitUpdate","preventDefault","props","match","params","token","postUpdate","componentDidMount","FormData","render","log","user","process","env","REACT_APP_API_URI","img","src","height","width"],"mappings":"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":["// Native modules import\r\nimport React, { Component } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\n// Personal modules import\r\n// import {isLoggedIn} from '../auth/index';\r\nimport { viewPost } from \"./apiPost\";\r\nimport defaultPostPic from \"../images/beautiful-sea.jpg\";\r\nimport { isLoggedIn } from \"../auth/index\";\r\nimport { updatePost } from \"../post/apiPost\";\r\n\r\nclass EditPost extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      id: \"\",\r\n      title: \"\",\r\n      body: \"\",\r\n      redirectionProfile: false,\r\n      error: \"\",\r\n      fileSize: 0,\r\n      loading: false,\r\n    };\r\n  }\r\n\r\n  init = async (postId) => {\r\n    try {\r\n      const data = await viewPost(postId);\r\n      if (data.error) {\r\n        this.setState({\r\n          redirectionProfile: true,\r\n        });\r\n      } else {\r\n        this.setState({\r\n          id: data.author._id,\r\n          title: data.title,\r\n          body: data.body,\r\n          error: \"\",\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error(\r\n        `The init method encountered the following error: ${error}`\r\n      );\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.postData = new FormData();\r\n    try {\r\n      const postId = this.props.match.params.postId;\r\n      if (postId) {\r\n        this.init(postId);\r\n      } else {\r\n        console.error(\"No postId found.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Something went wrong with componentDidMount method.\");\r\n    }\r\n  }\r\n\r\n  isValid = () => {\r\n    const { title, body, fileSize } = this.state;\r\n    if (fileSize > 1000000) {\r\n      this.setState({\r\n        loading: false,\r\n        error: \"Le poids du fichier ne doit pas dépasser 1Mb ! Déconne pas !\",\r\n      });\r\n      return false;\r\n    }\r\n    if (title.length === 0 || title.length > 50) {\r\n      this.setState({\r\n        loading: false,\r\n        error:\r\n          \"Le titre est requis et doit faire moins de 50 caractères, marin d'eau douce !\",\r\n      });\r\n      return false;\r\n    }\r\n    if (body.length === 0) {\r\n      this.setState({\r\n        loading: false,\r\n        error: `Un message est requis pour envoyer un... message, moussaillon.`,\r\n      });\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  // handleChange = (name) => (event) => {\r\n  //   this.setState({ error: \"\" });\r\n  //   const value = name === \"photo\" ? event.target.files[0] : event.target.value;\r\n  //   const fileSize = name === \"photo\" ? event.target.files[0].size : 0;\r\n  //   this.postData.set(name, value);\r\n  //   this.setState({\r\n  //     [name]: value,\r\n  //     fileSize,\r\n  //   });\r\n  // };\r\n\r\n  handleChange = (name) => (event) => {\r\n    this.setState({ error: \"\" });\r\n    const value = name === \"photo\" ? event.target.files[0] : event.target.value;\r\n\r\n    const fileSize = name === \"photo\" ? event.target.files[0].size : 0;\r\n    this.postData.set(name, value);\r\n    this.setState({ [name]: value, fileSize });\r\n  };\r\n\r\n  submitUpdate = async (event) => {\r\n    event.preventDefault();\r\n    this.setState({ loading: true });\r\n\r\n    if (this.isValid()) {\r\n      const postId = this.props.match.params.postId;\r\n      const token = isLoggedIn().token;\r\n\r\n      const data = await updatePost(postId, token, this.postData);\r\n      if (data.error) {\r\n        this.setState({ error: data.error });\r\n      } else {\r\n        this.setState({\r\n          loading: false,\r\n          title: \"\",\r\n          body: \"\",\r\n          redirectionProfile: true,\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  postUpdate = (title, body) => (\r\n    <form action=\"\">\r\n      <div className=\"form-group\">\r\n        <label className=\"text-muted\">Image</label>\r\n        <input\r\n          onChange={this.handleChange(\"photo\")}\r\n          type=\"file\"\r\n          accept=\"image/*\"\r\n          className=\"form-control\"\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label className=\"text-muted\">Titre</label>\r\n        <input\r\n          onChange={this.handleChange(\"title\")}\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          value={title}\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label className=\"text-muted\">Message</label>\r\n        <textarea\r\n          onChange={this.handleChange(\"body\")}\r\n          type=\"body\"\r\n          className=\"form-control\"\r\n          value={body}\r\n        />\r\n      </div>\r\n      <button\r\n        onClick={this.submitUpdate}\r\n        type=\"submit\"\r\n        className=\"btn btn-raised btn-primary\"\r\n      >\r\n        Envoyer\r\n      </button>\r\n    </form>\r\n  );\r\n\r\n  render() {\r\n    const { title, body, id, redirectionProfile } = this.state;\r\n    console.log('id inside render: ', id)\r\n    console.log('user._id inside render: ', isLoggedIn().user._id)\r\n    console.log('user inside render: ', isLoggedIn().user)\r\n    if (redirectionProfile) {\r\n      <Redirect to={`/user/${isLoggedIn().user._id}`} />;\r\n    }\r\n    return (\r\n      <div>\r\n        <div className=\"card-body\">\r\n          <img\r\n            src={`${process.env.REACT_APP_API_URI}/post/photo/6015ffadda6a195de889a999}`}\r\n            alt={title}\r\n            onError={(img) => (img.target.src = `${defaultPostPic}`)}\r\n            className=\"img-thumbnail mb-3\"\r\n            style={{ height: \"200px\", width: \"auto\" }}\r\n          />\r\n\r\n          <h3 className=\"card-title mt-3 mb-3\">{title}</h3>\r\n\r\n          {isLoggedIn().user._id === id && this.postUpdate(title, body)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EditPost;\r\n\r\n// class EditPost extends Component {\r\n//   constructor() {\r\n//       super();\r\n//       this.state = {\r\n//           id: \"\",\r\n//           title: \"\",\r\n//           body: \"\",\r\n//           redirectToProfile: false,\r\n//           error: \"\",\r\n//           fileSize: 0,\r\n//           loading: false\r\n//       };\r\n//   }\r\n\r\n//   init = postId => {\r\n//       viewPost(postId).then(data => {\r\n//           if (data.error) {\r\n//               this.setState({ redirectToProfile: true });\r\n//           } else {\r\n//               this.setState({\r\n//                   id: data.author._id,\r\n//                   title: data.title,\r\n//                   body: data.body,\r\n//                   error: \"\"\r\n//               });\r\n//           }\r\n//       });\r\n//   };\r\n\r\n//   componentDidMount() {\r\n//       this.postData = new FormData();\r\n//       const postId = this.props.match.params.postId;\r\n//       this.init(postId);\r\n//   }\r\n\r\n//   isValid = () => {\r\n//       const { title, body, fileSize } = this.state;\r\n//       if (fileSize > 1000000) {\r\n//           this.setState({\r\n//               error: \"File size should be less than 100kb\",\r\n//               loading: false\r\n//           });\r\n//           return false;\r\n//       }\r\n//       if (title.length === 0 || body.length === 0) {\r\n//           this.setState({ error: \"All fields are required\", loading: false });\r\n//           return false;\r\n//       }\r\n//       return true;\r\n//   };\r\n\r\n//   handleChange = name => event => {\r\n//       this.setState({ error: \"\" });\r\n//       const value =\r\n//           name === \"photo\" ? event.target.files[0] : event.target.value;\r\n\r\n//       const fileSize = name === \"photo\" ? event.target.files[0].size : 0;\r\n//       this.postData.set(name, value);\r\n//       this.setState({ [name]: value, fileSize });\r\n//   };\r\n\r\n//   clickSubmit = event => {\r\n//       event.preventDefault();\r\n//       this.setState({ loading: true });\r\n\r\n//       if (this.isValid()) {\r\n//           const postId = this.props.match.params.postId;\r\n//           const token = isLoggedIn().token;\r\n\r\n//           updatePost(postId, token, this.postData).then(data => {\r\n//               if (data.error) this.setState({ error: data.error });\r\n//               else {\r\n//                   this.setState({\r\n//                       loading: false,\r\n//                       title: \"\",\r\n//                       body: \"\",\r\n//                       redirectToProfile: true\r\n//                   });\r\n//               }\r\n//           });\r\n//       }\r\n//   };\r\n\r\n//   editPostForm = (title, body) => (\r\n//       <form>\r\n//           <div className=\"form-group\">\r\n//               <label className=\"text-muted\">Post Photo</label>\r\n//               <input\r\n//                   onChange={this.handleChange(\"photo\")}\r\n//                   type=\"file\"\r\n//                   accept=\"image/*\"\r\n//                   className=\"form-control\"\r\n//               />\r\n//           </div>\r\n//           <div className=\"form-group\">\r\n//               <label className=\"text-muted\">Title</label>\r\n//               <input\r\n//                   onChange={this.handleChange(\"title\")}\r\n//                   type=\"text\"\r\n//                   className=\"form-control\"\r\n//                   value={title}\r\n//               />\r\n//           </div>\r\n\r\n//           <div className=\"form-group\">\r\n//               <label className=\"text-muted\">Body</label>\r\n//               <textarea\r\n//                   onChange={this.handleChange(\"body\")}\r\n//                   type=\"text\"\r\n//                   className=\"form-control\"\r\n//                   value={body}\r\n//               />\r\n//           </div>\r\n\r\n//           <button\r\n//               onClick={this.clickSubmit}\r\n//               className=\"btn btn-raised btn-primary\"\r\n//           >\r\n//               Update Post\r\n//           </button>\r\n//       </form>\r\n//   );\r\n\r\n//   render() {\r\n//       const {\r\n//           id,\r\n//           title,\r\n//           body,\r\n//           redirectToProfile,\r\n//           error,\r\n//           loading\r\n//       } = this.state;\r\n\r\n//       if (redirectToProfile) {\r\n//           return <Redirect to={`/user/${isLoggedIn().user._id}`} />;\r\n//       }\r\n\r\n//       return (\r\n//           <div className=\"container\">\r\n//               <h2 className=\"mt-5 mb-5\">{title}</h2>\r\n\r\n//               <div\r\n//                   className=\"alert alert-danger\"\r\n//                   style={{ display: error ? \"\" : \"none\" }}\r\n//               >\r\n//                   {error}\r\n//               </div>\r\n\r\n//               {loading ? (\r\n//                   <div className=\"jumbotron text-center\">\r\n//                       <h2>Loading...</h2>\r\n//                   </div>\r\n//               ) : (\r\n//                   \"\"\r\n//               )}\r\n\r\n//               <img\r\n//                   style={{ height: \"200px\", width: \"auto\" }}\r\n//                   className=\"img-thumbnail\"\r\n//                   src={`${\r\n//                       process.env.REACT_APP_API_URI\r\n//                   }/post/photo/${id}`}\r\n//                   onError={i => (i.target.src = `${defaultPostPic}`)}\r\n//                   alt={title}\r\n//               />\r\n\r\n//               {/* {isLoggedIn().user.role === \"admin\" &&\r\n//                   this.editPostForm(title, body)} */}\r\n\r\n//               {isLoggedIn().user._id === id &&\r\n//                   this.editPostForm(title, body)}\r\n//           </div>\r\n//       );\r\n//   }\r\n// }\r\n\r\n// export default EditPost;\r\n"]},"metadata":{},"sourceType":"module"}