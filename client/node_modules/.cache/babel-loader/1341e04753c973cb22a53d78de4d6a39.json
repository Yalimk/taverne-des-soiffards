{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\virtuoworks\\\\Desktop\\\\taverne-des-soiffards\\\\front-end\\\\src\\\\pages\\\\core\\\\Taverne.jsx\";\n\n/* eslint-disable no-lone-blocks */\n// Native modules import\nimport React, { Component } from \"react\"; // Personal modules import\n\nimport ChatMessage from \"../../components/chat/ChatMessage\";\nimport ChatForm from \"../../components/chat/ChatForm\";\nimport { isLoggedIn } from \"../../logic/core/index\"; // Constants definition\n\nconst URL = `ws://localhost:9092`; // eslint-disable-next-line no-empty-pattern\n\nclass Taverne extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      pseudo: \"\",\n      messages: []\n    };\n    this.socket = new WebSocket(URL);\n\n    this.addMessage = message => this.setState(state => ({\n      messages: [message, ...state.messages]\n    }));\n\n    this.submitMessage = messageString => {\n      const messageData = {\n        pseudo: this.state.pseudo,\n        message: messageString\n      };\n      this.socket.send(JSON.stringify(messageData));\n      this.addMessage(messageData);\n    };\n  }\n\n  componentDidMount() {\n    this.socket.onopen = data => {\n      if (isLoggedIn()) {\n        const pirateName = isLoggedIn().user.pseudo; // console.log('data', data);\n\n        this.setState({\n          pseudo: pirateName\n        }); // console.log(`${pirateName} s'est connecté au tchat.`);\n      } else {\n        this.setState({\n          pseudo: \"Pirate inconnu\"\n        });\n        console.log(`Un pirate inconnu s'est connecté au tchat.`);\n      }\n    };\n\n    this.socket.onmessage = message => {\n      const messageData = JSON.parse(message.data);\n      this.addMessage(messageData);\n    };\n\n    this.socket.onclose = () => {\n      this.setState({\n        socket: new WebSocket(URL)\n      });\n    };\n  }\n\n  render() {\n    const {\n      messages\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container jumbotron\",\n      children: [/*#__PURE__*/_jsxDEV(ChatForm, {\n        socket: this.socket,\n        onSubmitMessage: messageString => this.submitMessage(messageString)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), messages.map((message, index) => /*#__PURE__*/_jsxDEV(ChatMessage, {\n        message: message.message,\n        pseudo: message.pseudo\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\n;\nexport default Taverne;","map":{"version":3,"sources":["C:/Users/virtuoworks/Desktop/taverne-des-soiffards/front-end/src/pages/core/Taverne.jsx"],"names":["React","Component","ChatMessage","ChatForm","isLoggedIn","URL","Taverne","state","pseudo","messages","socket","WebSocket","addMessage","message","setState","submitMessage","messageString","messageData","send","JSON","stringify","componentDidMount","onopen","data","pirateName","user","console","log","onmessage","parse","onclose","render","map","index"],"mappings":";;;AAAA;AACA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CAEA;;AACA,OAAOC,WAAP,MAAwB,mCAAxB;AACA,OAAOC,QAAP,MAAqB,gCAArB;AACA,SAASC,UAAT,QAA2B,wBAA3B,C,CAEA;;AACA,MAAMC,GAAG,GAAI,qBAAb,C,CAEA;;AACA,MAAMC,OAAN,SAAsBL,SAAtB,CAAgC;AAAA;AAAA;AAAA,SAC9BM,KAD8B,GACtB;AACNC,MAAAA,MAAM,EAAE,EADF;AAENC,MAAAA,QAAQ,EAAE;AAFJ,KADsB;AAAA,SAM9BC,MAN8B,GAMrB,IAAIC,SAAJ,CAAcN,GAAd,CANqB;;AAAA,SAQ9BO,UAR8B,GAQhBC,OAAD,IACX,KAAKC,QAAL,CAAeP,KAAD,KAAY;AACxBE,MAAAA,QAAQ,EAAE,CAACI,OAAD,EAAU,GAAGN,KAAK,CAACE,QAAnB;AADc,KAAZ,CAAd,CAT4B;;AAAA,SAa9BM,aAb8B,GAabC,aAAD,IAAmB;AACjC,YAAMC,WAAW,GAAG;AAAET,QAAAA,MAAM,EAAE,KAAKD,KAAL,CAAWC,MAArB;AAA6BK,QAAAA,OAAO,EAAEG;AAAtC,OAApB;AACA,WAAKN,MAAL,CAAYQ,IAAZ,CAAiBC,IAAI,CAACC,SAAL,CAAeH,WAAf,CAAjB;AACA,WAAKL,UAAL,CAAgBK,WAAhB;AACD,KAjB6B;AAAA;;AAmB9BI,EAAAA,iBAAiB,GAAG;AAClB,SAAKX,MAAL,CAAYY,MAAZ,GAAsBC,IAAD,IAAU;AAC7B,UAAInB,UAAU,EAAd,EAAkB;AAChB,cAAMoB,UAAU,GAAGpB,UAAU,GAAGqB,IAAb,CAAkBjB,MAArC,CADgB,CAEhB;;AACA,aAAKM,QAAL,CAAc;AACZN,UAAAA,MAAM,EAAEgB;AADI,SAAd,EAHgB,CAMhB;AACD,OAPD,MAOO;AACL,aAAKV,QAAL,CAAc;AACZN,UAAAA,MAAM,EAAE;AADI,SAAd;AAGAkB,QAAAA,OAAO,CAACC,GAAR,CAAa,4CAAb;AACD;AACF,KAdD;;AAgBA,SAAKjB,MAAL,CAAYkB,SAAZ,GAAyBf,OAAD,IAAa;AACnC,YAAMI,WAAW,GAAGE,IAAI,CAACU,KAAL,CAAWhB,OAAO,CAACU,IAAnB,CAApB;AACA,WAAKX,UAAL,CAAgBK,WAAhB;AACD,KAHD;;AAKA,SAAKP,MAAL,CAAYoB,OAAZ,GAAsB,MAAM;AAC1B,WAAKhB,QAAL,CAAc;AACZJ,QAAAA,MAAM,EAAE,IAAIC,SAAJ,CAAcN,GAAd;AADI,OAAd;AAGD,KAJD;AAKD;;AAED0B,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEtB,MAAAA;AAAF,QAAe,KAAKF,KAA1B;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,qBAAf;AAAA,8BACE,QAAC,QAAD;AACE,QAAA,MAAM,EAAE,KAAKG,MADf;AAEE,QAAA,eAAe,EAAGM,aAAD,IAAmB,KAAKD,aAAL,CAAmBC,aAAnB;AAFtC;AAAA;AAAA;AAAA;AAAA,cADF,EAKGP,QAAQ,CAACuB,GAAT,CAAa,CAACnB,OAAD,EAAUoB,KAAV,kBACZ,QAAC,WAAD;AAEE,QAAA,OAAO,EAAEpB,OAAO,CAACA,OAFnB;AAGE,QAAA,MAAM,EAAEA,OAAO,CAACL;AAHlB,SACOyB,KADP;AAAA;AAAA;AAAA;AAAA,cADD,CALH;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAeD;;AAjE6B;;AAkE/B;AAED,eAAe3B,OAAf","sourcesContent":["/* eslint-disable no-lone-blocks */\r\n// Native modules import\r\nimport React, { Component } from \"react\";\r\n\r\n// Personal modules import\r\nimport ChatMessage from \"../../components/chat/ChatMessage\";\r\nimport ChatForm from \"../../components/chat/ChatForm\";\r\nimport { isLoggedIn } from \"../../logic/core/index\";\r\n\r\n// Constants definition\r\nconst URL = `ws://localhost:9092`;\r\n\r\n// eslint-disable-next-line no-empty-pattern\r\nclass Taverne extends Component {\r\n  state = {\r\n    pseudo: \"\",\r\n    messages: [],\r\n  };\r\n\r\n  socket = new WebSocket(URL);\r\n\r\n  addMessage = (message) =>\r\n    this.setState((state) => ({\r\n      messages: [message, ...state.messages],\r\n    }));\r\n\r\n  submitMessage = (messageString) => {\r\n    const messageData = { pseudo: this.state.pseudo, message: messageString };\r\n    this.socket.send(JSON.stringify(messageData));\r\n    this.addMessage(messageData);\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.socket.onopen = (data) => {\r\n      if (isLoggedIn()) {\r\n        const pirateName = isLoggedIn().user.pseudo;\r\n        // console.log('data', data);\r\n        this.setState({\r\n          pseudo: pirateName,\r\n        });\r\n        // console.log(`${pirateName} s'est connecté au tchat.`);\r\n      } else {\r\n        this.setState({\r\n          pseudo: \"Pirate inconnu\",\r\n        });\r\n        console.log(`Un pirate inconnu s'est connecté au tchat.`);\r\n      }\r\n    };\r\n\r\n    this.socket.onmessage = (message) => {\r\n      const messageData = JSON.parse(message.data);\r\n      this.addMessage(messageData);\r\n    };\r\n\r\n    this.socket.onclose = () => {\r\n      this.setState({\r\n        socket: new WebSocket(URL),\r\n      });\r\n    };\r\n  };\r\n\r\n  render() {\r\n    const { messages } = this.state;\r\n    return (\r\n      <div className=\"container jumbotron\">\r\n        <ChatForm\r\n          socket={this.socket}\r\n          onSubmitMessage={(messageString) => this.submitMessage(messageString)}\r\n        />\r\n        {messages.map((message, index) => (\r\n          <ChatMessage\r\n            key={index}\r\n            message={message.message}\r\n            pseudo={message.pseudo}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  };\r\n};\r\n\r\nexport default Taverne;\r\n"]},"metadata":{},"sourceType":"module"}