{"ast":null,"code":"export const createPost = async (userId, token, post) => {\n  try {\n    const response = await fetch(`${process.env.REACT_APP_API_URI}/post/new/${userId}`, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        Authorization: `Bearer ${token}`\n      },\n      body: post\n    });\n    return response.json();\n  } catch (error) {\n    return console.error(`Couldn't post data to api because of error: ${error}.`);\n  }\n};\nexport const postsPerPage = async page => {\n  try {\n    const response = await fetch(`${process.env.REACT_APP_API_URI}/posts/?page=${page}`, {\n      method: \"GET\"\n    });\n    return response.json();\n  } catch (error) {\n    return console.error(`Couldn't get response from api because of error: ${error}.`);\n  }\n};\nexport const viewPost = async postId => {\n  try {\n    const response = await fetch(`${process.env.REACT_APP_API_URI}/post/${postId}`, {\n      method: \"GET\"\n    });\n    return response.json();\n  } catch (error) {\n    return console.error(`Couldn't get response from api in viewPost because of error: ${error}.`);\n  }\n};\nexport const listUserPosts = async (userId, token) => {\n  try {\n    const response = await fetch(`${process.env.REACT_APP_API_URI}/posts/by/${userId}`, {\n      method: \"GET\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.json();\n  } catch (error) {\n    return console.error(`Couldn't get response from api because of error: ${error}.`);\n  }\n};\nexport const remove = async (postId, token) => {\n  try {\n    const response = await fetch(`${process.env.REACT_APP_API_URI}/post/${postId}`, {\n      method: \"DELETE\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.json();\n  } catch (error) {\n    return console.error(`Couldn't get response from api because of error: ${error}.`);\n  }\n};\nexport const updatePost = async (postId, token, post) => {\n  try {\n    const response = await fetch(`${process.env.REACT_APP_API_URI}/post/${postId}`, {\n      method: \"PUT\",\n      headers: {\n        Accept: \"application/json\",\n        Authorization: `Bearer ${token}`\n      },\n      body: post\n    });\n    console.info('INSIDE UPDATEPOST APRES LE FETCH MAIS AVANT LE RETOUR DE LA REPONSE');\n    return response.json();\n  } catch (error) {\n    return console.error(`Couldn't put data to api because of error: ${error}.`);\n  }\n};\nexport const writeComment = async (userId, token, postId, comment) => {\n  try {\n    const response = await fetch(`${process.env.REACT_APP_API_URI}/post/comment`, {\n      method: \"PUT\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        userId,\n        postId,\n        comment\n      })\n    });\n    return response.json();\n  } catch (error) {\n    console.error(`[front-end/src/logic/apiPosts.js => writeComment] : error: ${error}`);\n  }\n};\nexport const deleteComment = async (userId, token, postId, comment) => {\n  try {\n    const response = await fetch(`${process.env.REACT_APP_API_URI}/post/uncomment`, {\n      method: \"PUT\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        userId,\n        postId,\n        comment\n      })\n    });\n    return response.json();\n  } catch (error) {\n    console.error(`[front-end/src/logic/apiPosts.js => writeComment] : error: ${error}`);\n  }\n};","map":{"version":3,"sources":["C:/Users/virtuoworks/Desktop/taverne-des-soiffards/front-end/src/logic/post/apiPost.js"],"names":["createPost","userId","token","post","response","fetch","process","env","REACT_APP_API_URI","method","headers","Accept","Authorization","body","json","error","console","postsPerPage","page","viewPost","postId","listUserPosts","remove","updatePost","info","writeComment","comment","JSON","stringify","deleteComment"],"mappings":"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","sourcesContent":["export const createPost = async (userId, token, post) => {\r\n  try {\r\n    const response = await fetch(\r\n      `${process.env.REACT_APP_API_URI}/post/new/${userId}`,\r\n      {\r\n        method: \"POST\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n        body: post,\r\n      }\r\n    );\r\n    return response.json();\r\n  } catch (error) {\r\n    return console.error(\r\n      `Couldn't post data to api because of error: ${error}.`\r\n    );\r\n  }\r\n};\r\n\r\nexport const postsPerPage = async (page) => {\r\n  try {\r\n    const response = await fetch(`${process.env.REACT_APP_API_URI}/posts/?page=${page}`, {\r\n      method: \"GET\",\r\n    });\r\n    return response.json();\r\n  } catch (error) {\r\n    return console.error(\r\n      `Couldn't get response from api because of error: ${error}.`\r\n    );\r\n  }\r\n};\r\n\r\nexport const viewPost = async (postId) => {\r\n  try {\r\n    const response = await fetch(`${process.env.REACT_APP_API_URI}/post/${postId}`, {\r\n      method: \"GET\",\r\n    });\r\n    return response.json();\r\n  } catch (error) {\r\n    return console.error(\r\n      `Couldn't get response from api in viewPost because of error: ${error}.`\r\n    );\r\n  }\r\n};\r\n\r\nexport const listUserPosts = async (userId, token) => {\r\n  try {\r\n    const response = await fetch(`${process.env.REACT_APP_API_URI}/posts/by/${userId}`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${token}`\r\n      }\r\n    });\r\n    return response.json();\r\n  } catch (error) {\r\n    return console.error(\r\n      `Couldn't get response from api because of error: ${error}.`\r\n    );\r\n  }\r\n};\r\n\r\nexport const remove = async (postId, token) => {\r\n  try {\r\n    const response = await fetch(`${process.env.REACT_APP_API_URI}/post/${postId}`, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n    return response.json();\r\n  } catch (error) {\r\n    return console.error(\r\n      `Couldn't get response from api because of error: ${error}.`\r\n    );\r\n  }\r\n};\r\n\r\nexport const updatePost = async (postId, token, post) => {\r\n  try {\r\n    const response = await fetch(`${process.env.REACT_APP_API_URI}/post/${postId}`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n      body: post,\r\n    });\r\n    console.info('INSIDE UPDATEPOST APRES LE FETCH MAIS AVANT LE RETOUR DE LA REPONSE')\r\n    return response.json();\r\n  } catch (error) {\r\n    return console.error(\r\n      `Couldn't put data to api because of error: ${error}.`\r\n    );\r\n  }\r\n};\r\n\r\nexport const writeComment = async (userId, token, postId, comment) => {\r\n  try {\r\n    const response = await fetch(`${process.env.REACT_APP_API_URI}/post/comment`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${token}`\r\n      },\r\n      body: JSON.stringify({ userId, postId, comment })\r\n    })\r\n    return response.json();\r\n  } catch (error) {\r\n    console.error(`[front-end/src/logic/apiPosts.js => writeComment] : error: ${error}`)\r\n  }\r\n};\r\n\r\nexport const deleteComment = async (userId, token, postId, comment) => {\r\n  try {\r\n    const response = await fetch(`${process.env.REACT_APP_API_URI}/post/uncomment`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${token}`\r\n      },\r\n      body: JSON.stringify({ userId, postId, comment })\r\n    })\r\n    return response.json();\r\n  } catch (error) {\r\n    console.error(`[front-end/src/logic/apiPosts.js => writeComment] : error: ${error}`)\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}