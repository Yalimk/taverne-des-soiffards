{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\virtuoworks\\\\Desktop\\\\taverne-des-soiffards\\\\front-end\\\\src\\\\core\\\\Taverne.jsx\",\n    _s = $RefreshSig$();\n\n/* eslint-disable no-lone-blocks */\n// Native modules import\nimport React from \"react\"; // import ReactDOM from \"react-dom\";\n// import io from \"socket.io-client\";\n// Personal modules import\n\nimport taverneChat from \"../chat/taverneChat\";\nimport { isLoggedIn } from \"../auth/index\"; // import { isLoggedIn } from \"../auth/index\";\n// const socket = io(process.env.CLIENT_URI, {\n//   transports: [\"websocket\", \"polling\"],\n// });\n// const socket = io(\"http://localhost:9092\");\n// const socket = io('http://localhost:9092/', {\n//   transports: [\"websocket\", \"polling\"],\n// });\n// eslint-disable-next-line no-empty-pattern\n\nconst Taverne = ({}) => {\n  _s();\n\n  const {\n    messages,\n    sendMessage\n  } = taverneChat();\n  const [newMessage, setNewMessage] = React.useState(\"\");\n\n  const handleNewMessageChange = event => {\n    setNewMessage(event.target.value);\n  };\n\n  const handleSendMessage = () => {\n    sendMessage(newMessage);\n    setNewMessage(\"\");\n  };\n\n  if (isLoggedIn()) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-room-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"room-name text-center\",\n        style: {\n          fontWeight: \"bold\"\n        },\n        children: [\"Bienvenue dans la Taverne, \", isLoggedIn().user.pseudo, \" !\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages-container\",\n        children: /*#__PURE__*/_jsxDEV(\"ol\", {\n          className: \"messages-list\",\n          children: messages.map((message, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `message-item ${message.ownedByCurrentUser ? isLoggedIn().user.pseudo : \"received-message\"}`,\n            children: message.body\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: newMessage,\n        onChange: handleNewMessageChange,\n        placeholder: \"Ecris ton message, pirate...\",\n        className: \"new-message-input-field\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        className: \"send-message-button\",\n        children: \"Envoyer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container jumbotron\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-12 mt-5 mb-5\",\n          children: /*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \" text-center\",\n            style: {\n              fontWeight: \"bold\"\n            },\n            children: \"Bienvenue dans la Taverne, pirate !\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this);\n  } // const [users, setUsers] = useState([]);\n  // const [message, setMessage] = useState(\"\");\n  // const [messages, setMessages] = useState([]);\n  // useEffect(() => {\n  //   if (isLoggedIn()) {\n  //     const socket = io(\"http://localhost:9092\");\n  //     // Reception/Emission type events\n  //     socket.on(\"connect\", () => {\n  //       console.log(\n  //         `[front-end/src/core/Homepage.jsx => socket.on('connect')] : pseudo: ${\n  //           isLoggedIn().user.pseudo\n  //         }`\n  //       );\n  //       socket.emit(\"pseudo\", isLoggedIn().user.pseudo);\n  //     });\n  //     // Reception only type events\n  //     socket.on(\"connected\", (user) => {\n  //       console.log(\n  //         `[front-end/src/core/Homepage.jsx => socket.on('connected')] : user: ${user}`\n  //       );\n  //       setUsers((users) => [...users, user]);\n  //     });\n  //     socket.on(\"users\", (users) => {\n  //       console.log(\n  //         `[front-end/src/core/Homepage.jsx => socket.on('users')] : users: ${users}`\n  //       );\n  //       setUsers(users);\n  //     });\n  //     socket.on(\"message\", (message) => {\n  //       setMessages((messages) => [...messages, message]);\n  //     });\n  //     socket.on(\"disconnect\", (id) => {\n  //       console.log(\n  //         `[front-end/src/core/Homepage.jsx => socket.on('disconnect')] : id of disconnected user: ${id}`\n  //       );\n  //       setUsers((users) => {\n  //         return users.filter((user) => user.id !== id);\n  //       });\n  //     });\n  //   }\n  // }, []);\n  // const submitForm = (event) => {\n  // event.preventDefault();\n  // if (isLoggedIn()) {\n  //   const socket = io(\"http://localhost:9092\");\n  //   socket.emit(\"send\", message);\n  //   console.log(\n  //     `[front-end/src/core/Homepage.jsx => submitForm] : message: ${message}`\n  //   );\n  //   setMessage(\"\");\n  // }\n  // };\n  // if (isLoggedIn()) {\n  //   return (\n  //     <div className=\"container jumbotron\">\n  //       <div className=\"row\">\n  //         <div className=\"col-md-12 mt-5 mb-5\">\n  //           <h4 className=\" text-center\" style={{fontWeight: \"bold\"}}>Bienvenue dans la Taverne, {isLoggedIn().user.pseudo}</h4>\n  //         </div>\n  //       </div>\n\n\n  {\n    /* <div className=\"row\">\r\n          <div className=\"col-md-8\">\r\n            <h5>Messages</h5>\r\n            <div>\r\n              {messages.map(({ user, message, date }, index) => (\r\n                <div key={index} className=\"row mb-2\">\r\n                  <div className=\"col-md-2\">{date}</div>\r\n                  <div className=\"col-md-2\">{user.pseudo}</div>\r\n                  <div className=\"col-md-2\">{message}</div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n            <form action=\"\" onSubmit={submitForm}>\r\n              <div className=\"input-group\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  onChange={(event) => setMessage(event.currentTarget.value)}\r\n                  value={message}\r\n                />\r\n                <span className=\"input-group-btn\">\r\n                  <button className=\"btn btn-primary btn-sm\">Envoyer</button>\r\n                </span>\r\n              </div>\r\n            </form>\r\n          </div>\r\n          <div className=\"col-md-4\">\r\n            <h5>Pirates pr√©sents</h5>\r\n            <ul>\r\n              {users.map(({ name, id }) => (\r\n                <li key={id}>{name}</li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        </div> */\n  }\n  {\n    /* </div>\r\n    );\r\n    } else { */\n  }\n}; // };\n\n\n_s(Taverne, \"XKYF7c9cy2B2z7IihwwqYiWFJSA=\");\n\n_c = Taverne;\nexport default Taverne;\n\nvar _c;\n\n$RefreshReg$(_c, \"Taverne\");","map":{"version":3,"sources":["C:/Users/virtuoworks/Desktop/taverne-des-soiffards/front-end/src/core/Taverne.jsx"],"names":["React","taverneChat","isLoggedIn","Taverne","messages","sendMessage","newMessage","setNewMessage","useState","handleNewMessageChange","event","target","value","handleSendMessage","fontWeight","user","pseudo","map","message","i","ownedByCurrentUser","body"],"mappings":";;;;;AAAA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;AACA;AAEA;;AACA,OAAOC,WAAP,MAAwB,qBAAxB;AACA,SAASC,UAAT,QAA2B,eAA3B,C,CACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,MAAMC,OAAO,GAAG,CAAC,EAAD,KAAQ;AAAA;;AACtB,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA4BJ,WAAW,EAA7C;AACA,QAAM,CAACK,UAAD,EAAaC,aAAb,IAA8BP,KAAK,CAACQ,QAAN,CAAe,EAAf,CAApC;;AAEA,QAAMC,sBAAsB,GAAIC,KAAD,IAAW;AACxCH,IAAAA,aAAa,CAACG,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAb;AACD,GAFD;;AAIA,QAAMC,iBAAiB,GAAG,MAAM;AAC9BR,IAAAA,WAAW,CAACC,UAAD,CAAX;AACAC,IAAAA,aAAa,CAAC,EAAD,CAAb;AACD,GAHD;;AAKA,MAAIL,UAAU,EAAd,EAAkB;AAChB,wBACE;AAAK,MAAA,SAAS,EAAC,qBAAf;AAAA,8BACE;AAAI,QAAA,SAAS,EAAC,uBAAd;AAAsC,QAAA,KAAK,EAAE;AAAEY,UAAAA,UAAU,EAAE;AAAd,SAA7C;AAAA,kDAC8BZ,UAAU,GAAGa,IAAb,CAAkBC,MADhD;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAIE;AAAK,QAAA,SAAS,EAAC,oBAAf;AAAA,+BACE;AAAI,UAAA,SAAS,EAAC,eAAd;AAAA,oBACGZ,QAAQ,CAACa,GAAT,CAAa,CAACC,OAAD,EAAUC,CAAV,kBACZ;AAEE,YAAA,SAAS,EAAG,gBACVD,OAAO,CAACE,kBAAR,GAA6BlB,UAAU,GAAGa,IAAb,CAAkBC,MAA/C,GAAwD,kBACzD,EAJH;AAAA,sBAMGE,OAAO,CAACG;AANX,aACOF,CADP;AAAA;AAAA;AAAA;AAAA,kBADD;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAJF,eAkBE;AACE,QAAA,KAAK,EAAEb,UADT;AAEE,QAAA,QAAQ,EAAEG,sBAFZ;AAGE,QAAA,WAAW,EAAC,8BAHd;AAIE,QAAA,SAAS,EAAC;AAJZ;AAAA;AAAA;AAAA;AAAA,cAlBF,eAwBE;AAAQ,QAAA,OAAO,EAAEI,iBAAjB;AAAoC,QAAA,SAAS,EAAC,qBAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAxBF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AA8BD,GA/BD,MA+BO;AACL,wBACE;AAAK,MAAA,SAAS,EAAC,qBAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA,+BACE;AAAK,UAAA,SAAS,EAAC,qBAAf;AAAA,iCACE;AAAI,YAAA,SAAS,EAAC,cAAd;AAA6B,YAAA,KAAK,EAAE;AAAEC,cAAAA,UAAU,EAAE;AAAd,aAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAWD,GAxDqB,CA0DtvKD,C,CAwKA;;;GAxKMX,O;;KAAAA,O;AA0KN,eAAeA,OAAf","sourcesContent":["/* eslint-disable no-lone-blocks */\r\n// Native modules import\r\nimport React from \"react\";\r\n// import ReactDOM from \"react-dom\";\r\n// import io from \"socket.io-client\";\r\n\r\n// Personal modules import\r\nimport taverneChat from \"../chat/taverneChat\";\r\nimport { isLoggedIn } from \"../auth/index\";\r\n// import { isLoggedIn } from \"../auth/index\";\r\n\r\n// const socket = io(process.env.CLIENT_URI, {\r\n//   transports: [\"websocket\", \"polling\"],\r\n// });\r\n// const socket = io(\"http://localhost:9092\");\r\n// const socket = io('http://localhost:9092/', {\r\n//   transports: [\"websocket\", \"polling\"],\r\n// });\r\n\r\n// eslint-disable-next-line no-empty-pattern\r\nconst Taverne = ({}) => {\r\n  const { messages, sendMessage } = taverneChat();\r\n  const [newMessage, setNewMessage] = React.useState(\"\");\r\n\r\n  const handleNewMessageChange = (event) => {\r\n    setNewMessage(event.target.value);\r\n  };\r\n\r\n  const handleSendMessage = () => {\r\n    sendMessage(newMessage);\r\n    setNewMessage(\"\");\r\n  };\r\n\r\n  if (isLoggedIn()) {\r\n    return (\r\n      <div className=\"chat-room-container\">\r\n        <h4 className=\"room-name text-center\" style={{ fontWeight: \"bold\" }}>\r\n          Bienvenue dans la Taverne, {isLoggedIn().user.pseudo} !\r\n        </h4>\r\n        <div className=\"messages-container\">\r\n          <ol className=\"messages-list\">\r\n            {messages.map((message, i) => (\r\n              <li\r\n                key={i}\r\n                className={`message-item ${\r\n                  message.ownedByCurrentUser ? isLoggedIn().user.pseudo : \"received-message\"\r\n                }`}\r\n              >\r\n                {message.body}\r\n              </li>\r\n            ))}\r\n          </ol>\r\n        </div>\r\n        <textarea\r\n          value={newMessage}\r\n          onChange={handleNewMessageChange}\r\n          placeholder=\"Ecris ton message, pirate...\"\r\n          className=\"new-message-input-field\"\r\n        />\r\n        <button onClick={handleSendMessage} className=\"send-message-button\">\r\n          Envoyer\r\n        </button>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div className=\"container jumbotron\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-12 mt-5 mb-5\">\r\n            <h4 className=\" text-center\" style={{ fontWeight: \"bold\" }}>\r\n              Bienvenue dans la Taverne, pirate !\r\n            </h4>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // const [users, setUsers] = useState([]);\r\n  // const [message, setMessage] = useState(\"\");\r\n  // const [messages, setMessages] = useState([]);\r\n\r\n  // useEffect(() => {\r\n  //   if (isLoggedIn()) {\r\n  //     const socket = io(\"http://localhost:9092\");\r\n  //     // Reception/Emission type events\r\n  //     socket.on(\"connect\", () => {\r\n  //       console.log(\r\n  //         `[front-end/src/core/Homepage.jsx => socket.on('connect')] : pseudo: ${\r\n  //           isLoggedIn().user.pseudo\r\n  //         }`\r\n  //       );\r\n  //       socket.emit(\"pseudo\", isLoggedIn().user.pseudo);\r\n  //     });\r\n\r\n  //     // Reception only type events\r\n  //     socket.on(\"connected\", (user) => {\r\n  //       console.log(\r\n  //         `[front-end/src/core/Homepage.jsx => socket.on('connected')] : user: ${user}`\r\n  //       );\r\n  //       setUsers((users) => [...users, user]);\r\n  //     });\r\n\r\n  //     socket.on(\"users\", (users) => {\r\n  //       console.log(\r\n  //         `[front-end/src/core/Homepage.jsx => socket.on('users')] : users: ${users}`\r\n  //       );\r\n  //       setUsers(users);\r\n  //     });\r\n\r\n  //     socket.on(\"message\", (message) => {\r\n  //       setMessages((messages) => [...messages, message]);\r\n  //     });\r\n\r\n  //     socket.on(\"disconnect\", (id) => {\r\n  //       console.log(\r\n  //         `[front-end/src/core/Homepage.jsx => socket.on('disconnect')] : id of disconnected user: ${id}`\r\n  //       );\r\n  //       setUsers((users) => {\r\n  //         return users.filter((user) => user.id !== id);\r\n  //       });\r\n  //     });\r\n  //   }\r\n  // }, []);\r\n\r\n  // const submitForm = (event) => {\r\n  // event.preventDefault();\r\n  // if (isLoggedIn()) {\r\n  //   const socket = io(\"http://localhost:9092\");\r\n  //   socket.emit(\"send\", message);\r\n  //   console.log(\r\n  //     `[front-end/src/core/Homepage.jsx => submitForm] : message: ${message}`\r\n  //   );\r\n  //   setMessage(\"\");\r\n  // }\r\n  // };\r\n\r\n  // if (isLoggedIn()) {\r\n  //   return (\r\n  //     <div className=\"container jumbotron\">\r\n  //       <div className=\"row\">\r\n  //         <div className=\"col-md-12 mt-5 mb-5\">\r\n  //           <h4 className=\" text-center\" style={{fontWeight: \"bold\"}}>Bienvenue dans la Taverne, {isLoggedIn().user.pseudo}</h4>\r\n  //         </div>\r\n  //       </div>\r\n  {\r\n    /* <div className=\"row\">\r\n          <div className=\"col-md-8\">\r\n            <h5>Messages</h5>\r\n            <div>\r\n              {messages.map(({ user, message, date }, index) => (\r\n                <div key={index} className=\"row mb-2\">\r\n                  <div className=\"col-md-2\">{date}</div>\r\n                  <div className=\"col-md-2\">{user.pseudo}</div>\r\n                  <div className=\"col-md-2\">{message}</div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n            <form action=\"\" onSubmit={submitForm}>\r\n              <div className=\"input-group\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  onChange={(event) => setMessage(event.currentTarget.value)}\r\n                  value={message}\r\n                />\r\n                <span className=\"input-group-btn\">\r\n                  <button className=\"btn btn-primary btn-sm\">Envoyer</button>\r\n                </span>\r\n              </div>\r\n            </form>\r\n          </div>\r\n          <div className=\"col-md-4\">\r\n            <h5>Pirates pr√©sents</h5>\r\n            <ul>\r\n              {users.map(({ name, id }) => (\r\n                <li key={id}>{name}</li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        </div> */\r\n  }\r\n  {\r\n    /* </div>\r\n    );\r\n  } else { */\r\n  }\r\n};\r\n// };\r\n\r\nexport default Taverne;\r\n"]},"metadata":{},"sourceType":"module"}